name: actualizar

on:
  # L√°nzalo manualmente cuando quieras
  workflow_dispatch:
  # Programado (cada 4 horas). Cambia si prefieres otros horarios.
  schedule:
    - cron: "0 */4 * * *"

jobs:
  actualizar:
    runs-on: ubuntu-latest
    env:
      DATA_FILE: precio-aceite.json

    steps:
      - name: Checkout (repo completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar dependencias (Playwright + Chromium)
        run: |
          python -m pip install --upgrade pip
          pip install playwright requests beautifulsoup4
          python -m playwright install --with-deps chromium

      - name: Ejecutar scraper (Playwright)
        run: python scraper.py

      - name: Ver JSON generado
        run: |
          echo "Contenido de ${DATA_FILE}:"
          test -f "${DATA_FILE}" && cat "${DATA_FILE}" || (echo "‚ùå ${DATA_FILE} no existe" && exit 1)

      # Detecta si el archivo cambi√≥ con respecto al √∫ltimo commit
      - name: Detectar cambios en el JSON
        id: cambios
        run: |
          if git diff --quiet -- "${DATA_FILE}"; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No hay cambios en ${DATA_FILE}"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Hay cambios en ${DATA_FILE}"
          fi

      - name: Preparar commit (pull, add, commit)
        if: steps.cambios.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${DATA_FILE}"
          git commit -m "Actualizar ${DATA_FILE} autom√°ticamente (scraper)"

      - name: Hacer push con token personal (SCRAPERGITHUB)
        if: steps.cambios.outputs.changed == 'true'
        env:
          TOKEN: ${{ secrets.SCRAPERGITHUB }}
        run: |
          set -e
          git remote set-url origin "https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git"
          git fetch origin main
          # Integra cambios remotos antes de subir (evita non-fast-forward)
          git pull --rebase origin main || true
          git push origin HEAD:main
          echo "√öltimo commit:"
          git log -1 --oneline

      - name: Disparar redeploy en Netlify (Build Hook)
        if: steps.cambios.outputs.changed == 'true'
        env:
          BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK_URL }}
        run: |
          if [ -z "$BUILD_HOOK" ]; then
            echo "‚ö†Ô∏è NETLIFY_BUILD_HOOK_URL no est√° configurado; no se dispara redeploy."
            exit 0
          fi
          echo "Lanzando redeploy en Netlify‚Ä¶"
          curl -fsS -X POST -H "Content-Type: application/json" --data '{}' "$BUILD_HOOK"
          echo "Redeploy solicitado."

      # (Opcional) Si quieres SIEMPRE redeploy aunque no cambie el JSON, usa:
      # if: ${{ always() }}
      # en la tarea anterior en lugar de la condici√≥n por cambios.

      - name: Resumen
        run: |
          echo "‚úÖ Workflow finalizado."
          echo "Cambios en ${DATA_FILE}: ${{ steps.cambios.outputs.changed }}"

  # üî¥ Alerta si algo falla en 'actualizar'
  alertar_fallo:
    needs: actualizar
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Mensaje de error
        run: echo "‚ö†Ô∏è El job 'actualizar' ha fallado."
