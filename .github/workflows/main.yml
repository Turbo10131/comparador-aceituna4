name: actualizar

on:
  workflow_dispatch:
  schedule:
    # 09:50 UTC
    - cron: "50 9 * * *"
    # 10:15 UTC
    - cron: "15 10 * * *"
    # 11:00 UTC
    - cron: "0 11 * * *"

jobs:
  actualizar:
    runs-on: ubuntu-latest
    env:
      DATA_FILES: "precio-aceite.json precio-aceite-historico.json"

    steps:
      - name: Checkout (repo completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Instalar dependencias (Playwright + Chromium)
        run: |
          python -m pip install --upgrade pip
          pip install playwright requests beautifulsoup4
          python -m playwright install --with-deps chromium

      - name: Ejecutar scraper (Playwright)
        run: python scraper.py

      - name: Validar precios históricos
        run: python validar_precios.py

      - name: Ejecutar conversión a JSON histórico
        run: python convertir_historico.py

      - name: Ver JSON generados
        run: |
          for f in ${DATA_FILES}; do
            echo "Contenido de $f:"
            test -f "$f" && cat "$f" || echo "⚠️ $f no existe."
            echo ""
          done

      - name: Detectar cambios en los JSON
        id: cambios
        run: |
          if git diff --quiet -- ${DATA_FILES}; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No hay cambios en ${DATA_FILES}"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Hay cambios en ${DATA_FILES}"
          fi

      - name: Preparar commit (pull, add, commit)
        if: steps.cambios.outputs.changed == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${DATA_FILES}
          git commit -m "Actualizar JSONs automáticamente (scraper + validación): ${DATA_FILES}"

      - name: Hacer push con token personal (SCRAPERGITHUB)
        if: steps.cambios.outputs.changed == 'true'
        env:
          TOKEN: ${{ secrets.SCRAPERGITHUB }}
        run: |
          set -e
          git remote set-url origin "https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git"
          git fetch origin main
          git pull --rebase origin main || true
          git push origin HEAD:main
          echo "Último commit:"
          git log -1 --oneline

      - name: Disparar redeploy en Netlify (Build Hook)
        if: steps.cambios.outputs.changed == 'true'
        env:
          BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK_URL }}
        run: |
          if [ -z "$BUILD_HOOK" ]; then
            echo "⚠️ NETLIFY_BUILD_HOOK_URL no está configurado; no se dispara redeploy."
            exit 0
          fi
          echo "Lanzando redeploy en Netlify…"
          curl -fsS -X POST -H "Content-Type: application/json" --data '{}' "$BUILD_HOOK"
          echo "Redeploy solicitado."

      - name: Resumen
        run: |
          echo "✅ Workflow finalizado."
          echo "Cambios: ${{ steps.cambios.outputs.changed }}"

  alertar_fallo:
    needs: actualizar
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Mensaje de error
        run: echo "⚠️ El job 'actualizar' ha fallado."

